{"version":3,"sources":["helpers/number.js","components/table.js","components/App.js","index.js"],"names":["numberFormatting","number","formattedNumber","isNaN","toString","replace","Tables","this","props","name","newCases","critical","active","recovered","new","deathTotal","casesTotal","testTotal","moment","lastUpdated","format","React","Component","App","state","error","isLoaded","countries","axios","process","then","response","setState","data","console","log","catch","getCountries","time","className","map","country","key","cases","deaths","total","tests","ReactDOM","render","document","querySelector"],"mappings":"uSAAaA,G,MAAmB,SAACC,GAC/B,IAAIC,EAMJ,OALID,IACFC,EAAmBC,MAAMF,GAErBA,EADAA,EAAOG,WAAWC,QAAQ,wBAAyB,MAGlDH,I,iBCAYI,E,uKAEb,OACA,kBAAC,QAAD,KACI,kBAAC,KAAD,KACI,kBAAC,KAAD,KAAKC,KAAKC,MAAMC,MAChB,kBAAC,KAAD,KAAKT,EAAiBO,KAAKC,MAAME,WACjC,kBAAC,KAAD,KAAKV,EAAiBO,KAAKC,MAAMG,WACjC,kBAAC,KAAD,KAAKX,EAAiBO,KAAKC,MAAMI,SACjC,kBAAC,KAAD,KAAKZ,EAAiBO,KAAKC,MAAMK,YACjC,kBAAC,KAAD,KAAKb,EAAiBO,KAAKC,MAAMM,MACjC,kBAAC,KAAD,KAAKd,EAAiBO,KAAKC,MAAMO,aACjC,kBAAC,KAAD,KAAKf,EAAiBO,KAAKC,MAAMQ,aACjC,kBAAC,KAAD,KAAKhB,EAAiBO,KAAKC,MAAMS,YACjC,kBAAC,KAAD,KAAKC,IAAOX,KAAKC,MAAMW,aAAaC,OAAO,c,GAdvBC,IAAMC,WCuF3BC,G,wDAtFZ,aAAc,IAAD,8BACZ,gBACKC,MAAO,CACVC,MAAO,KACPC,UAAU,EACVC,UAAW,IALD,E,gLAUdC,IAAM,CACE,OAAS,MACT,IAAM,8CACN,QAAU,CACV,eAAe,2BACf,kBAAkB,2BAClB,iBAAiB,GAAjB,OAAqBC,sDACrB,gBAAkB,KAGjBC,MAAK,SAACC,GACL,EAAKC,SAAS,CAAEL,UAAWI,EAASE,KAAKF,SAAUL,UAAU,IAC7DQ,QAAQC,IAAI,EAAKX,MAAMG,WACvBO,QAAQC,IAAI,EAAKX,MAAME,aAExBU,OAAM,SAACX,GACNS,QAAQC,IAAIV,M,2IAIlBlB,KAAK8B,iB,+BAGG,IACAV,EAAcpB,KAAKiB,MAAnBG,UAGN,OADFO,QAAQC,IAAIR,EAAUW,MAElB,+BAAWC,UAAU,4BACnB,gDACA,oKACA,mGAGChC,KAAKiB,MAAME,WAAaC,EACvB,uBAAGY,UAAU,WAAb,cAEF,kBAAC,QAAD,CAAOA,UAAU,wBACf,kBAAC,QAAD,KACI,kBAAC,KAAD,KACI,kBAAC,KAAD,gBACA,kBAAC,KAAD,kBACA,kBAAC,KAAD,eACA,kBAAC,KAAD,iBACA,kBAAC,KAAD,kBACA,kBAAC,KAAD,mBACA,kBAAC,KAAD,qBACA,kBAAC,KAAD,oBACA,kBAAC,KAAD,oBACA,kBAAC,KAAD,uBAGPZ,EAAUa,KAAI,SAAAC,GACf,OACE,kBAAC,EAAD,CACEC,IAAKD,EAAQA,QACbhC,KAAMgC,EAAQA,QACd/B,SAAU+B,EAAQE,MAAM7B,IACxBF,OAAQ6B,EAAQE,MAAM/B,OACtBD,SAAU8B,EAAQE,MAAMhC,SACxBE,UAAW4B,EAAQE,MAAM9B,UACzBC,IAAK2B,EAAQG,OAAO9B,IACpBC,WAAY0B,EAAQG,OAAOC,MAC3B7B,WAAYyB,EAAQE,MAAME,MAC1B5B,UAAWwB,EAAQK,MAAMD,MACzB1B,YAAasB,EAAQH,gB,GA5ErBjB,IAAMC,YCHxByB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,cAAc,Y","file":"static/js/main.b36fc44a.chunk.js","sourcesContent":["export const numberFormatting = (number) => {\n  let formattedNumber;\n  if (number) {\n    formattedNumber = !isNaN(number)\n      ? number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')\n      : number;\n  }\n  return formattedNumber;\n};\n","import React from 'react';\nimport { Tbody, Tr, Td } from 'react-super-responsive-table';\nimport 'react-super-responsive-table/dist/SuperResponsiveTableStyle.css';\nimport { numberFormatting } from \"../helpers/number\";\nimport moment from 'moment';\n\n\nexport default class Tables extends React.Component {   \n    render() {\n        return (\n        <Tbody> \n            <Tr>\n                <Td>{this.props.name}</Td>\n                <Td>{numberFormatting(this.props.newCases)}</Td>\n                <Td>{numberFormatting(this.props.critical)}</Td>\n                <Td>{numberFormatting(this.props.active)}</Td>\n                <Td>{numberFormatting(this.props.recovered)}</Td>\n                <Td>{numberFormatting(this.props.new)}</Td>\n                <Td>{numberFormatting(this.props.deathTotal)}</Td>\n                <Td>{numberFormatting(this.props.casesTotal)}</Td>\n                <Td>{numberFormatting(this.props.testTotal)}</Td>\n                <Td>{moment(this.props.lastUpdated).format('lll')}</Td>\n            </Tr>\n        </Tbody> \n        )\n    }\n}","import React from 'react';\nimport axios from 'axios';\nimport { Table, Thead, Tr, Th } from 'react-super-responsive-table';\nimport 'react-super-responsive-table/dist/SuperResponsiveTableStyle.css';\nimport Tables from '../components/table';\nimport './App.css';\n\nclass App extends React.Component {\n   constructor(){\n    super();\n    this.state= {\n      error: null,\n      isLoaded: true,\n      countries: []\n    };\n  }  \n  \n async getCountries() {\n  axios({\n          \"method\":\"GET\",\n          \"url\":\"https://covid-193.p.rapidapi.com/statistics\",\n          \"headers\":{\n          \"content-type\":\"application/octet-stream\",\n          \"x-rapidapi-host\":\"covid-193.p.rapidapi.com\",\n          \"x-rapidapi-key\": `${process.env.REACT_APP_API_KEY}`,\n          \"useQueryString\": true\n          }\n          })\n          .then((response) => {\n            this.setState({ countries: response.data.response, isLoaded: false});\n            console.log(this.state.countries);\n            console.log(this.state.isLoaded); \n          })\n          .catch((error)=>{\n            console.log(error)\n          })\n }\n  componentDidMount() {\n      this.getCountries()\n      }\n    \n    render() {\n      const { countries } = this.state\n       // access state after rerendering in component did mount\n      console.log(countries.time);\n        return (\n          <container className=\"ui center aligned header\">\n            <h1>Covid-19 Tracker</h1>\n            <p>Welcome to the Covid-19 Tracker. A simple and straight forward tracker that pulls the latest updates of recent cases around the world. \n            <p>Boxes that are not filled in yet have not reported any new updates.</p></p> \n            {/* Creating a function that finds the first element within countries. \n            if countries exist then return the p tag, showing country.time */}\n            {this.state.isLoaded || !countries ? (\n              <p className=\"loading\">Loading...</p>\n             ) : (\n            <Table className=\"ui single line table\"> \n              <Thead>\n                  <Tr>\n                      <Th>Country</Th>\n                      <Th>New Cases</Th>\n                      <Th>Active</Th> \n                      <Th>Critical</Th>\n                      <Th>Recovered</Th>\n                      <Th>New Deaths</Th>\n                      <Th>Total Deaths</Th>\n                      <Th>Total Cases</Th>\n                      <Th>Total Tests</Th>\n                      <Th>Last Updated</Th>\n                  </Tr>\n              </Thead>\n              {countries.map(country => {\n              return (\n                <Tables \n                  key={country.country}\n                  name={country.country}\n                  newCases={country.cases.new}\n                  active={country.cases.active}\n                  critical={country.cases.critical}\n                  recovered={country.cases.recovered}\n                  new={country.deaths.new}\n                  deathTotal={country.deaths.total}\n                  casesTotal={country.cases.total}\n                  testTotal={country.tests.total}\n                  lastUpdated={country.time}\n                />\n                )})}\n              </Table> \n              )}\n          </container>\n        )\n    }\n}\n        \n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.querySelector('#root'));"],"sourceRoot":""}